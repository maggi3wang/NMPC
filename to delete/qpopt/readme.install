This is file qpopt/readme.install

The QPOPT Directories and Files
===============================
This distribution contains Fortran, C and Matlab files for the
SOL/UCSD  optimization codes lpopt/qpopt.

The $QPOPT directory refers to the directory where you wish to install
the QPOPT software.  It contains these subdirectories and files:

$QPOPT/src         contains the base Fortran version.

$QPOPT/examples    contains Fortran sample programs for the base version.

$QPOPT/csrc        contains a C version of the qpopt source distribution,
                   as translated with the f2c translator.  These files are
                   only of interest to C programmers, and can be deleted
                   by Matlab users once the cmex files have been built.

$QPOPT/cmex        contains C "mex" interfaces for calling lssol, qpopt and
                   nlssol from a  Matlab 6.* session.

$QPOPT/fmex        contains F77 "mex" interfaces for calling lssol and qpopt
                   from a  Matlab 4.*  session.

$QPOPT/doc         contains .ps and .pdf versions of sundry documentation.

$QPOPT/GNUmakefile contains the "master" makefile for installing the system.


The C version of qpoptq was generated by the f2c Fortran to C
translator. The file "f2c.h" and the f2c runtime library must be
available.  It is assumed, in standard Unix fashion, that there are
directories containing f2c, f2c.h and libf2c.a from the f2c
distribution.  Before building qpoptcmex, you must set the environment
variables F2C, F2CLIBRARY and F2CINCLUDE to the locations of these
subdirectories.

The recommended way of installing the entire distribution is to cd to
the directory qpopt/ and type

    % export F2CLIBRARY=/your/local/f2cLibrary/location
    % export F2CINCLUDE=/your/local/f2cInclude/location
    % export F2C=/your/local/f2c/location
    % gmake
    % gmake clean

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+   PLEASE NOTE: the master makefile qpopt/GNUmakefile sets the    +
+   compiler options for some of the more common compilers.        +
+   However, these options are MACHINE DEPENDENT, and              +
+   (unfortunately) it is not possible to provide makefiles that   +
+   will work for every compiler on every machine.  Please         +
+   consult your LOCAL SYSTEM ADMINISTRATOR if you have trouble.   +
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

If you only need the Fortran and C libraries, not the mex files
(because you are writing a Fortran or C language program instead
of using Matlab), type

    % export F2CLIBRARY=/your/local/f2cLibrary/location
    % export F2CINCLUDE=/your/local/f2cInclude/location
    % export F2C=/your/local/f2c/location
    % gmake libraries
    % gmake clean

If you are not writing Fortran or C programs, but only using the
Matlab interface, type

    % export F2CLIBRARY=/your/local/f2cLibrary/location
    % export F2CINCLUDE=/your/local/f2cInclude/location
    % export F2C=/your/local/f2c/location
    % gmake
    % gmake veryclean

which will remove the Fortran and C libraries.

The f2c distribution can be found at http://www.netlib.org. If the f2c
distribution installed on your machine is installed in some
non-standard fashion, see the comments in

$QPOPT/GNUmakefile
$QPOPT/csrc/GNUmakefile
$QPOPT/cmex/src/GNUmakefile

which describes how to set macros within those files to point to the
correct locations of "f2c.h" and the f2c runtime libraries.

Using the cmex Files in Matlab
==============================

Once the cmex file  qpoptcmex have been
compiled, you may try them out from a Matlab session.  Run Matlab in
the directory qpopt/cmex.  At the Matlab prompt, type

    >> addpath examples % makes the m-files in $QPOPT/cmex/examples available
    >> qpoptmain

The directory qpopt/cmex/examples contains sample problems that
demonstrate how to use the qpopt Matlab interface.  Read the
documentation in the m-files in the current directory for more
information. Typing

    >> more on
    >> help Contents

from within Matlab would be a good start.


Other Directories in the Distribution
=====================================

$QPOPT/cmex/examples/
Contains examples of how to use lpopt and qpopt within Matlab.

$QPOPT/cmex/src/
Contains the C source code for lpoptmex and qpoptcmex.
This directory may be deleted once the cmex files have been built.

$QPOPT/cmex/tests/
This directory probably won't be present in your distribution. It
contains tests that are only of interest for those intending to modify
qpoptcmex.

After the software has been installed, the following directories will
exist.

$QPOPT/OStype-ARCHtype/optimized/lib
contains optimized archived libraries generated with operating system
OStype an a machine with architecture ARCHtype. Typical examples are
$QPOPT/IRIX-mips/     SGI compiled with compiler option o32
$QPOPT/Linux-i686/    Linux compiled with gcc Red Hat 6.0
$QPOPT/IRIX64-mips/   SGI compiled with compiler option 64
$QPOPT/SunOS-sun4m/   Sun Sparc

The libraries are only of interest to Fortran and C programmers, and
can be deleted by Matlab users once the cmex interfaces lpoptmex and
qpoptcmex have been built.

In $QPOPT/OStype-ARCHtype/optimized/lib, the libraries:
libblas_c.a  and libblas_f77.a

contain Level 1 and Level 2 BLAS, numerical libraries needed for the
qpopt distribution. Optimized versions of these libraries may already
be installed on your system, and should run faster than the BLAS
libraries provided by this distribution. The version of BLAS installed
on your system may, however, be incompatible with this distribution.
The only way to find out is to try it. Your mileage may vary.

The libraries:
liblblas_f77.a,   libqpopt_f77.a,
liblblas_c.a, and libqpopt_c.a
define the qpopt distribution for use by Fortran and C programmers.
See the qpopt documentation for a description of the routines in these
files, and see the f2c documentation for a description of Fortran
calling conventions.

Obtaining Debuggable Libraries
==============================
To obtain versions of the libraries compiled using the -g option, type

    % gmake clean
    % gmake debugged

This will generate debugged libraries in the directory
$QPOPT/OStype-ARCHtype/debugged/
Debugged versions of the cmex files will also be generated.
The "gmake clean" is mandatory.

Running Fortran Test Examples
=============================

You can run a sample problem for lpopt and qpopt using the
shell script "qpopt/examples/run".  This script has arguments that
allow you to give the explicit paths to the directory containing the
problem executables.  Typing "./run" in the directory $QPOPT/examples
will show that the script "run" has two arguments:

 usage: ./run <problem_name> <exe_dir>

where <exe_dir> contains the executables. For example, on a machine
with compiled code in the directory:
$QPOPT/OStype-ARCHtype/optimized
the two test problems can be executed using the commands

    % ./run  qpoptmain  $QPOPT/OStype-ARCHtype/optimized/examples/
    % ./run  lpoptmain  $QPOPT/OStype-ARCHtype/optimized/examples/


And in Conclusion
=================
GOOD NEWS about your applications is always welcomed enthusiastically.
BAD NEWS (concerning bugs, obscure documentation, etc) is gratefully
accepted.

E. Michael Gertz and  Philip E. Gill
University of California, San Diego. November 22, 2000
